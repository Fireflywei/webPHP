正则表达式

正则表达式就是一个字符串需要放到函数中才能起作用，没有使用函数的正则就是一个普通的字符串，正则只是一个规则。

我们使用正则主要用于分割、匹配、查找、替换的操作。
例如输入的是否为邮箱，是否输入了不该输入的内容等等。
正则应用1：
下面是from表单提交过来的邮箱验证：
<?php
  header('Content-Type: text/html; charset=UTF-8');
  $email = $_GET['email'];
  $preg = '/^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/'; 
  $ok = preg_match_all($preg,$email);
  var_dump($ok);
  if($ok != 0){
    echo '邮箱合法';
  }else {
    echo '邮箱不合法';
  }
?>

正则应用2：
学过数据库我们都知道:
<?php 
  $uid = $_GET['uid'];
  $sql = 'delete from user where uid ='.$uid.';'; 
  mysql_query($sql);

?>
上面的代码如果我没有正则判断，那么如果我没有输入正常的一个uid而是输入1 or 1 = 1
这时候的sql就是delete from user where uid =1 or 1 = 1;
1=1的删除命令会让你的数据库一下全部删完。


看了上面的代码觉得很神奇是不是，那么学完今天的课程，你就会知道如何编写正则表达式了。


正则表达式是一个匹配的模式，本身就是一个字符串，但是有自己的语法规则，正则需要在对应的函数中才能起作用

今天我们所学习的正则是兼容 Perl 语言的正则表达式。在PHP手册函数参考-文本处理-PCRE中。
注意：手册中还提供了POSIX 正则表达式，这是在PHP4中使用的正则，在PHP5以后，不再使用此正则，用PCRE代替。但是在一些老的项目中仍然可以看见。

在学习正则表达式之前我们需要了解正则的组成，正则表达式是由以下几个部分组成

1）定界符：定义正则的边界
2）原子：是正则不可分割的最小组成单位
3）元字符：不能单独使用，是配合原子使用的，用来拓展原子的功能、修饰和限定原子
4）模式修正符：对整个正则的修正

下面我我们来按照顺序依次给大家介绍这四种组成部分

一、定界符：

<?php
  $preg = '//'; 
?>
其中的两个//就是正则的定界符，所有的正则语法写在//之间（模式修正符在//之外），除了使用//之外，还可以使用!!、||、@@等。除字母、数字和斜线“\”，其他任何字符都能做定界符。这里就不一一演示了，值得一提的是正则通常都用//表示，业内普遍使用//，为了代码可读性和方便别人维护，默认使用//来做定界符，我们作为初学者，就遵循这个规范来写吧。

二、原子：
原子是最小的组成单元。

<?php
  $preg = '/a/'; 
?>
其中a就是原子，这个正则的意思就是字母a。
其中有一些原子是通用的。例如你们可以想到表示所有数字的，表示所有字母的，下面介绍一些常用的通配符：
\d  表示所有数字，相当于[0-9]
\D  表示非数字，相当于[^0-9]
\w  表示字，相当于[a-zA-Z0-9_]
\W  表示非字，相当于[^a-zA-Z0-9_]
\s  表示打印字符，\n \t  \
\S  表示非打印字符，除了空格回车垂直制表符等

三、元字符：
*       前面的原子匹配匹配任意次
+       前面的原子匹配一次或多次
?       前面的原子匹配0次或者1次
|       前面的原子匹配两个或者多个分支（或的关系，两边出现一次即可匹配，优先级最低）
{n}     前面的原子匹配n次
{n,}    前面的原子匹配至少n次
{n,m}   前面的原子匹配n到m次
^或\A   目标字符串必须以什么什么开始（在多行中表示每一行第一个，在[]中表示非，例如[^a]就是除了a）
$或\Z   目标字符串必须以什么什么结尾（在多行中表示每行最后一个）
\b      单词边界
\B      除了单词以外的部分
()      1.改变优先级别2.将小原子变成大原子(add)*就是add这个单词任意次，不是d字符任意次3.子模式比如(http|https),在()中加?:取消子模式即(?:)4.反向引用
^与$    要在两端，表示以什么什么开始和以什么什么结尾，例如'/^a$/',就是必须a开始，a结尾的字符串


四、模式修正符：
1.写在定界符右边
2.可以组合写，也可以单独写（就是可以写一个或者多个）
常用的有
i  不区分大小写
m  视为多行（^$每一行）
s  可以匹配换行
x  忽略空白
v  取消贪婪模式，或者使用'(.*?)'取消，使用'(.*?)'就不能使用u


教学实验代码：
<?php
  header('Content-Type: text/html; charset=UTF-8');
  $str = ''; /随便输入一段字符串/
  $preg = '//'; //教学需要用到的实验正则
  if(preg_match_all($preg,$str,$result));
    echo "正则<b>{$preg}</b>，和字符串<b>{$str}</b>匹配成功<br>";
    var_dump($result);
  }else {
    echo '匹配失败';
  }
?>

可能会用到的函数
1. preg_filter(正则,替换成什么,需要替换的字符串) ― 执行一个正则表达式搜索和替换
2. preg_grep(正则,输入的数组) ― 返回匹配模式的数组条目
3. preg_last_error(void) ― 返回最后一个PCRE正则执行产生的错误代码
4. preg_match_all(正则,需要查找的字符串,查找到的结果) ― 执行一个全局正则表达式匹配
5. preg_match(正则,需要查找的字符串,查找到的结果) ― 执行一个正则表达式匹配
6. preg_quote(str) ― 转义正则表达式字符
7. preg_replace_callback(正则,回调函数,需要搜索的字符串) ― 执行一个正则表达式搜索并且使用一个回调进行替换
8. preg_replace(正则,替换成什么,需要替换的字符串) ― 执行一个正则表达式的搜索和替换
9. preg_split(正则,需要分割的字符串) ― 通过一个正则表达式分隔字符串

